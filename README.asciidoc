= dom.js

A collection of DOM wrapper routines to simplify DOM manipulation. The routines are in a `DOM` object to limit the effect on the global name space.

A description of the routines follows.

##	Summary

[frame="topbot",options="header",cols="m,m"]
|=======
| Method
| Description

2+| *Select Elements*
| `DOM.element(html)`				| Create Element from HTML
| `DOM.elements(html[,nodeList])`	| Create Elements from HTML as array or nodeList

2+| *Insert Elements*
| `DOM.beforeElement(newElement,element)`	| Insert newElement before element
| `DOM.prependElement(newElement,element)`	| Insert newElement inside element at beginning
| `DOM.appendElement(newElement,element)`	| Insert newElement inside element at end
| `DOM.afterElement(newElement,element)`	| Insert newElement after element

2+| *Insert Elements from HTML*
| `DOM.beforeHTML(html,element)`	| Insert newElement before element
| `DOM.prependHTML(html,element)`	| Insert newElement inside element at beginning
| `DOM.appendHTML(html,element)`	| Insert newElement inside element at end
| `DOM.afterHTML(html,element)`		| Insert newElement after element

2+| *Combination of Above*
| `DOM.before(newElement,element)`	| Insert newElement before element
| `DOM.prepend(newElement,element)`	| Insert newElement inside element at beginning
| `DOM.append(newElement,element)`	| Insert newElement inside element at end
| `DOM.after(newElement,element)`	| Insert newElement after element

2+| *Toggle Attrbute*
| `DOM.toggleAttribute(element,attribute[,value])`	| Toggle an element’s attribute.
| `DOM.radio(elements,attribute[,allOff])`			| Add a `click` listener to toggle then elements’ attribute.

2+| *Wrapping*
| `DOM.wrap(element,wrapper)`			| Wraps a single element inside a designated wrapper element.
| `DOM.wrapAll(elements,wrapper)`		| Wraps a collection of element inside a designated wrapper element.
| `DOM.unwrap(element[,totally])`		| Unwraps a single element.
| `DOM.empty(element)`					| Removes all of the content of the element.

2+| *Ajax*
| `DOM.get(url[,callback[,query]])`		| Makes an Ajax call to `url`, with optional callback function and an optional query string.
| `DOM.loadHTML(element,url[,query]])`	| Makes an Ajax call to `url`, with an optional query string, and loads the result into the `element`; the result is interpreted as *HTML*.
| `DOM.loadText(element,url[,query]])`	| Makes an Ajax call to `url`, with an optional query string, and loads the result into the `element`; the result is interpreted as *text*.

2+| *Siblings*
| `DOM.previousSibling(element)`		| Find Previous Sibling, skipping white space.
| `DOM.nextSibling(element)`			| Find Next Sibling, skipping white space.
| `DOM.firstChild(element)`				| Find First Child, skipping white space.
| `DOM.lastChild(element)`				| Find Last Child, skipping white space.

2+| *Others*
| `DOM.scrollPosition()`							| Gets the current scroll position of the window as an object: `{left,top}`.
| `DOM.boundingRect(element[,documentRelative])`	| Gets box information about the element as an object.
|=======

## Select Elements

`DOM.select(selector)`::
Select a single Element. This is just a wrapper for `document.querySelector()`

`DOM.selectAll(selector,nodeList=false)`::
Select a single Element. This is just a wrapper for `document.querySelector()`
+
By default, the result is an *Array* of elements. The optional second parameter allows you to prefer a *nodeList*.

## Create Elements

`DOM.element(html)`::
Create Element from HTML

`DOM.elements(html,nodeList=false)`::
Create Elements from HTML as array or nodeList
+
By default, the result is an *Array* of elements. The optional second parameter allows you to prefer a *nodeList*.

## Insert Elements

There are eight routines which will place an element somewhere in the DOM. Four of them will place Element objects (such as those created or selected above), while four of them will place an element generated from an HTML string.

There are four positions to insert your new element. `insertBefore` and `insertAfter` place the element _outside_, immediately before after  the original element. `prepend` and `append` place the new element _inside_, at the beginning or the end of the content of the original element.

[[img-insert]]
.Insert Element Positions
image::insert.png[Insert Element]

### Insert Existing Element

`DOM.beforeElement(newElement,element)`::
Insert newElement before element
`DOM.prependElement(newElement,element)`::
Insert newElement inside element at beginning
`DOM.appendElement(newElement,element)`::
Insert newElement inside element at end
`DOM.afterElement(newElement,element)`::
Insert newElement after element

### Insert Element from HTML

The following create an element from an html string. Otherwise they do the same as above.

`DOM.beforeHTML(html,element)`::
Insert newElement before element
`DOM.prependHTML(html,element)`::
Insert newElement inside element at beginning
`DOM.appendHTML(html,element)`::
Insert newElement inside element at end
`DOM.afterHTML(html,element)`::
Insert newElement after element

### Combination of Above

The following insert an element or create an element from an html string. Otherwise they do the same as above.

`DOM.prefixHTML(html,element)`::
Insert newElement before element
`DOM.prependHTML(html,element)`::
Insert newElement inside element at beginning
`DOM.appendHTML(html,element)`::
Insert newElement inside element at end
`DOM.affixHTML(html,element)`::
Insert newElement after element

## Toggle Attrbute

This will toggle an element’s attribute by adding or removing it. Optionally, you can set the value of the attribute to something other than `true`.

`DOM.toggleAttribute(element,attribute,value=true)`::
Toggle an element’s attribute. Its default value, if set, is `true`.

`DOM.radio(elements,attribute,allOff=false)`::
Adds an `onclick` listener to all of the elements to set the attribute of only a single element.
+
If the `allOff` parameter is `true`, selecting a selected element will remove the attribute.
##	Wrapping

There are 3 routines which wrap or unwrap Elements.

`DOM.wrap(element,wrapper)`::
Wraps a single element inside a designated wrapper element.

`DOM.wrapAll(elements,wrapper)`::
Wraps a collection of element inside a designated wrapper element.

`DOM.unwrap(element[,totally])`::
Unwraps a single element; that is moves it from inside its parent to outside. If the optional `totally` value is `true`, then the old parent element will be removed, including any remaining content.

`DOM.empty(element)`::
Removes all of the content of the element.

##	Ajax

Some simple Ajax functions, using the `get` method.

`DOM.get(url[,callback[,query]])`::
Makes an Ajax call to `url`, with optional callback function and an optional query string.

### `callback`

This should be a function in the following format:

[source,js]
----
function something(data) {
	//…
}
----

The `data` parameter will get the `responseText` from the Ajax call.

### `query`

This is a query string _without_ the leading quesion mark (`?`).

`DOM.loadHTML(element,url[,query]])`::
Makes an Ajax call to `url`, with an optional query string, and loads the result into the `element`; the result is interpreted as *HTML*.

`DOM.loadText(element,url[,query]])`::
Makes an Ajax call to `url`, with an optional query string, and loads the result into the `element`; the result is interpreted as *text*.

##	Event Listeners

`DOM.listen(element,listener,fn,capture)`::
`DOM.listenAll(elements,listener,fn,capture)`::
Adds an event listener function an element or a collection of elements.
+
The `fn` parameter is the event listener function, and is required. The `capture` parameter is optional.

##	Siblings

Some Browsers, notably Mozilla, include white spaces or comments between elements in the DOM tree.

[NOTE]
.Alternative Methods
====
Modern Browsers include alternative functions designed to skip text nodes.

They are the `.previousElementSibling`, `.nextElementSibling`, `.firstElementChild` and `.lastElementChild` properties.
====
This is a set of functions which will skip white space or comment nodes only.

You can safely use then for all browsers.

`DOM.previousSibling(element)`::
`DOM.nextSibling(element)`::
Find Previous or Next Sibling, skipping white space.

`DOM.firstChild(element)`::
`DOM.lastChild(element)`::
Find First or Last Child, skipping white space.

##	Others

`DOM.scrollPosition()`::
Gets the current scroll position of the window as an object: `{left,top}`.

`DOM.boundingRect(element[,documentRelative])`::
Gets box information about the element as an object:

[width="80em",frame="topbot",options="header",cols="m,m"]
|=======
| properties				| description
| x, y						| synonym for left & top
| width, height				| dimensions of the box
| left, top, right, bottom	| position of the box
| scrollLeft, scrollTop		| the window scroll amount
|=======


## E&OE

This code does what it does and doesn’t do what it doesn’t do.

Share & Enjoy …
